// Platzhalter f√ºr clock.min.js
// Bitte ersetze diesen Inhalt bei Bedarf durch die echte Version von https://github.com/haozhu233/clockjs/blob/master/clock.min.js

class Clock {
  constructor(containerId) {
    this.container = document.getElementById(containerId);
    this.hour = 0;
    this.minute = 0;
    this.draw();
  }

  draw() {
    this.container.innerHTML = '';
    const canvas = document.createElement('canvas');
    canvas.width = 300;
    canvas.height = 300;
    this.container.appendChild(canvas);
    this.ctx = canvas.getContext('2d');
    this.update();
  }

  update() {
    const ctx = this.ctx;
    ctx.clearRect(0, 0, 300, 300);

    ctx.beginPath();
    ctx.arc(150, 150, 140, 0, 2 * Math.PI);
    ctx.stroke();

    for (let i = 0; i < 12; i++) {
      const angle = i * Math.PI / 6;
      const x = 150 + Math.cos(angle - Math.PI / 2) * 120;
      const y = 150 + Math.sin(angle - Math.PI / 2) * 120;
      ctx.fillText(i === 0 ? '12' : i.toString(), x - 5, y + 5);
    }

    const hourAngle = ((this.hour % 12) + this.minute / 60) * Math.PI / 6;
    const minuteAngle = this.minute * Math.PI / 30;

    ctx.beginPath();
    ctx.moveTo(150, 150);
    ctx.lineTo(150 + 50 * Math.cos(hourAngle - Math.PI / 2),
               150 + 50 * Math.sin(hourAngle - Math.PI / 2));
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(150, 150);
    ctx.lineTo(150 + 80 * Math.cos(minuteAngle - Math.PI / 2),
               150 + 80 * Math.sin(minuteAngle - Math.PI / 2));
    ctx.stroke();
  }

  setTime(hour, minute) {
    this.hour = hour;
    this.minute = minute;
    this.update();
  }
}